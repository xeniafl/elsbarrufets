print(compareModel)
}
for(j in 1:10){
print(j)
set.seed(1)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
training2 <- dummyok[inTraining2,]
testing2 <- dummyok[-inTraining2,]
set.seed(j)
models <- c("rf","svmLinear","knn")
compareModel <- c()
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
set.seed(1)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
training2 <- dummyok[inTraining2,]
testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
training2 <- dummyok[inTraining2,]
testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(1)
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
training2 <- dummyok[inTraining2,]
testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(1)
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
library(readr)
library(caret)
library(lattice)
library(ggplot2)
library(corrplot)
library(ISLR)
library(e1071)
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
training2 <- dummyok[inTraining2,]
testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(1)
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = "rf", trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = "rf", trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "knn", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "knn", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "knn", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
set.seed(2)
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
set.seed(2)
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
set.seed(2)
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
set.seed(2)
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
set.seed(3)
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
set.seed(3)
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training, method = "rf", trControl=rfitControl, importance=TRUE)
pre <- predict(rfFitr2, testing)
predMetric <- postResample(testing$Volume, pre)
predMetric
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
View(training)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
set.seed(2)
inTraining <- createDataPartition(existingproductattributes2017$Volume, p = .80, list = FALSE)
training <- existingproductattributes2017[inTraining,]
testing <- existingproductattributes2017[-inTraining,]
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = "rf", trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(j)
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(56)
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(56)
for(i in models) {
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
#predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
#colnames(compareModel) <- models
print(compareModel)
}
View(training2)
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(56)
for(i in models) {
#rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i)#, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(j)
for(i in models) {
#rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i)#, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(j)
for(i in models) {
#rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i)#, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
for(j in 1:10){
print(j)
dummyok <- subset(existingproductattributes2017, select = c("Volume", "x4StarReviews", "PositiveServiceReview"))
#inTraining2 <- createDataPartition(dummyok$Volume, p = .80, list = FALSE)
#training2 <- dummyok[inTraining2,]
#testing2 <- dummyok[-inTraining2,]
models <- c("rf","svmLinear","knn")
compareModel <- c()
set.seed(j)
for(i in models) {
#rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2, search = 'random', returnResamp = "final" )
rfFitr2 <- train(Volume~., data = training2, method = i)#, trControl=rfitControl)
pre <- predict(rfFitr2, testing2)
predMetric <- postResample(testing2$Volume, pre)
compareModel <- cbind(compareModel, predMetric)
}
colnames(compareModel) <- models
print(compareModel)
}
